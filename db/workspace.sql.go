// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspace.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWorkspaceMember = `-- name: AddWorkspaceMember :exec
INSERT INTO workspace_members (workspace_id, user_id, role)
VALUES ($1, $2, $3)
`

type AddWorkspaceMemberParams struct {
	WorkspaceID pgtype.UUID
	UserID      pgtype.UUID
	Role        string
}

func (q *Queries) AddWorkspaceMember(ctx context.Context, arg AddWorkspaceMemberParams) error {
	_, err := q.db.Exec(ctx, addWorkspaceMember, arg.WorkspaceID, arg.UserID, arg.Role)
	return err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (id, name, created_by)
VALUES ($1, $2, $3)
RETURNING id, name, created_by, created_at
`

type CreateWorkspaceParams struct {
	ID        pgtype.UUID
	Name      string
	CreatedBy pgtype.UUID
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace, arg.ID, arg.Name, arg.CreatedBy)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listUserWorkspaces = `-- name: ListUserWorkspaces :many
SELECT w.id, w.name, w.created_by, w.created_at
FROM workspaces w
JOIN workspace_members wm ON w.id = wm.workspace_id
WHERE wm.user_id = $1
ORDER BY w.created_at DESC
`

func (q *Queries) ListUserWorkspaces(ctx context.Context, userID pgtype.UUID) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, listUserWorkspaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
